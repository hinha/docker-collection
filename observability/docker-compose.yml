x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

networks:
  opentelemetry:
    external: true
    driver: bridge

services:
  otel-collector:
    networks:
      - opentelemetry
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.120.0
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    user: 0:0
    volumes:
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./src/otel-collector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./src/otel-collector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317:4317"  # ✅ gRPC (OTLP)
      - "4318:4318"  # ✅ HTTP (OTLP Metrics)
      - "8889:8889"  # ✅ Prometheus /metrics
      - "55681:55681" # (optional legacy ports)
    depends_on:
      jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD", "grpcurl", "-plaintext", "localhost:4317", "grpc.health.v1.Health/Check"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *logging
    environment:
      # - ENVOY_PORT=8080
      - OST_FILESYSTEM=/
      - OTEL_COLLECTOR_HOST=otel-collector
      - OTEL_COLLECTOR_PORT_GRPC=4317
      - OTEL_COLLECTOR_PORT_HTTP=4318
      - GOMEMLIMIT=160MiB
  jaeger:
    platform: linux/amd64
    networks:
      - opentelemetry
    image: jaegertracing/all-in-one:1.66.0
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://prometheus:9090"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      - "16686:16686"         # Jaeger UI
      # - "8889:8889"           #  <-- untuk Prometheus scrape
      - "14269:14269"         # Jaeger Internal Health Port (default)
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging
    healthcheck:
      test: ["CMD", "sh", "-c", "test -S /var/run/docker.sock"]
      interval: 30s
      timeout: 10s
      retries: 5
  grafana:
    platform: linux/amd64
    networks:
      - opentelemetry
    container_name: grafana
    image: grafana/grafana:11.5.2
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    environment:
      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
      - "GF_SECURITY_ADMIN_USER=admin@example.com"
      - "GF_SECURITY_ADMIN_PASSWORD=supersecure123"
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"
    logging: *logging
  
  prometheus:
    platform: linux/amd64
    networks:
      - opentelemetry
    image: quay.io/prometheus/prometheus:v3.2.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --web.enable-otlp-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "9090:9090"
    logging: *logging